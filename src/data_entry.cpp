#include<list>
#include<string>
#include<iostream>
#include<fstream>
#include<map>

#define TERMINAL_INDICATOR 0
#define VARIABLE_INDICATOR 1
#define PROMPT ": "

using namespace std;

list<string> group_terminals;
list<string> group_variables;
list<string> group_productions;

map<string, int> classify;
void enterTerminals()
{/*{{{*/
	string temp;
	cout<<"\nEnter Terminals: \n";
	
	while(1)
	{
		cout<<PROMPT;
		getline(cin,temp);
		if(temp=="") break;
		classify[temp]=TERMINAL_INDICATOR;
		group_terminals.push_back(temp);	
	}
}

void addTerminal(string ter)
{
	classify[ter]=TERMINAL_INDICATOR;
	group_terminals.push_back(ter);
	
}
/*}}}*/

void printTerminals()
{/*{{{*/
	cout<<"--------TERMINALS--------------\n";
	list<string> :: iterator i;
	for(i=group_terminals.begin();i!=group_terminals.end();i++)
	{
		cout<<*i<<"\n";
	}

}/*}}}*/

void enterVariables()
{/*{{{*/
	cout<<"\nEnter Variables: \n";
	string temp;
	while(1)
	{
		cout<<PROMPT;
		getline(cin,temp);
		if(temp=="") break;
		classify[temp]=VARIABLE_INDICATOR;
		group_variables.push_back(temp);	
	}
}/*}}}*/

void addVariable(string var)
{
		classify[var] = VARIABLE_INDICATOR;
		group_variables.push_back(var);	
}

void printVariables()
{/*{{{*/
	cout<<"--------VARIABLES--------------\n";
	list<string> :: iterator i;
	for(i=group_variables.begin();i!=group_variables.end();i++)
	{
		cout<<*i<<"\n";
	}

}/*}}}*/

void enterProductions()
{/*{{{*/
	cout<<"\nEnter Productions: ";
	string temp;
	while(1)	
	{
		cout<<PROMPT;
		getline(cin,temp);
		if(temp=="") break;
		group_productions.push_back(temp);	
	}

}/*}}}*/

void addProduction(string pr)
{
	group_productions.push_back(pr);
}

void printProductions()
{/*{{{*/

	cout<<"--------PRODUCTIONS--------------\n";
	list<string> :: iterator i;
	for(i=group_productions.begin();i!=group_productions.end();i++)
	{
		cout<<*i<<"\n";
	}
	
}/*}}}*/


void generateConfigFile()
{
	ofstream parserconf("./parser_config.txt",ios::out);
	parserconf<<"@File generated by YAMREC\n\
@\n\
@: Indicates Comments\n\
@Enter terminals below , one each line, end with newline\n\
@Example: INT\n\
@\n\
\n\
@Enter variables below, one each line, end with newline\n\
@Example: S\n\
@\n\
\n\
@Enter productions below, one each line, space between symbols, end with newline\n\
@Example :  S -> INT S | INT\n\
\n\
@\n";
	parserconf.close();

	cout<<"\nConfiguration file \"parser_config.txt\" has been created\n";
}


void readFile(string filename)
{
	const char *fname = filename.c_str();
	ifstream configfile(fname, ios::in);
	string temp;
	
	while(1)
	{
		getline(configfile,temp);
		if(temp[0]=='@')continue;
		if(temp=="") break;
		classify[temp]=TERMINAL_INDICATOR;
		group_terminals.push_back(temp);	
	}

	while(1)
	{
		getline(configfile,temp);
		if(temp[0]=='@')continue;
		if(temp=="") break;
		classify[temp]=VARIABLE_INDICATOR;
		group_variables.push_back(temp);	
	}

	while(1)	
	{
		getline(configfile,temp);
		if(temp[0]=='@')continue;
		if(temp=="") break;
		group_productions.push_back(temp);	
	}
	configfile.close();
}
