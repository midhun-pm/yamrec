#include<list>
#include<string>
#include<iostream>
#include<fstream>
#include<map>

#define TERMINAL_INDICATOR 0
#define VARIABLE_INDICATOR 1
#define PROMPT ": "

using namespace std;

list<string> group_terminals;
list<string> group_variables;
list<string> group_productions;

map<string, int> classify;
void enterTerminals()
{/*{{{*/
	string temp;
	cout<<"\nEnter Terminals: \n";
	
	while(1)
	{
		cout<<PROMPT;
		getline(cin,temp);
		if(temp=="") break;
		classify[temp]=TERMINAL_INDICATOR;
		group_terminals.push_back(temp);	
	}
}

void addTerminal(string ter)
{
	classify[ter]=TERMINAL_INDICATOR;
	group_terminals.push_back(ter);
	
}
/*}}}*/

void printTerminals()
{/*{{{*/
	cout<<"--------TERMINALS--------------\n";
	list<string> :: iterator i;
	for(i=group_terminals.begin();i!=group_terminals.end();i++)
	{
		cout<<*i<<"\n";
	}

}/*}}}*/

void enterVariables()
{/*{{{*/
	cout<<"\nEnter Variables: \n";
	string temp;
	while(1)
	{
		cout<<PROMPT;
		getline(cin,temp);
		if(temp=="") break;
		classify[temp]=VARIABLE_INDICATOR;
		group_variables.push_back(temp);	
	}
}/*}}}*/

void addVariable(string var)
{
		classify[var] = VARIABLE_INDICATOR;
		group_variables.push_back(var);	
}

void printVariables()
{/*{{{*/
	cout<<"--------VARIABLES--------------\n";
	list<string> :: iterator i;
	for(i=group_variables.begin();i!=group_variables.end();i++)
	{
		cout<<*i<<"\n";
	}

}/*}}}*/

void enterProductions()
{/*{{{*/
	cout<<"\nEnter Productions: ";
	string temp;
	while(1)	
	{
		cout<<PROMPT;
		getline(cin,temp);
		if(temp=="") break;
		group_productions.push_back(temp);	
	}

}/*}}}*/

void addProduction(string pr)
{
	group_productions.push_back(pr);
}

void printProductions()
{/*{{{*/

	cout<<"--------PRODUCTIONS--------------\n";
	list<string> :: iterator i;
	for(i=group_productions.begin();i!=group_productions.end();i++)
	{
		cout<<*i<<"\n";
	}
	
}/*}}}*/


void generateConfigFile()
{
	ofstream parserconf("parser_config.txt",ios::out);
	parserconf<<"@File generated by AMREC\n\
@\n\
@: Indicates Comments\n\
@Enter terminals below , one each line, end with newline\n\
@Example: INT\n\
@\n\
\n\
@Enter variables below, one each line, end with newline\n\
@Example: S\n\
@\n\
\n\
@Enter productions below, one each line, space between symbols, end with newline\n\
@Example :  S -> INT S | INT\n\
\n\
@\n";
	parserconf.close();

	cout<<"\nConfiguration file \"parser_config.txt\" has been created\n";
}


void readFile(string filename)
{
	const char *fname = filename.c_str();
	ifstream configfile(fname, ios::in);
	string temp;
	
	while(1)
	{
		getline(configfile,temp);
		if(temp[0]=='@')continue;
		if(temp=="") break;
		classify[temp]=TERMINAL_INDICATOR;
		group_terminals.push_back(temp);	
	}

	while(1)
	{
		getline(configfile,temp);
		if(temp[0]=='@')continue;
		if(temp=="") break;
		classify[temp]=VARIABLE_INDICATOR;
		group_variables.push_back(temp);	
	}

	while(1)	
	{
		getline(configfile,temp);
		if(temp[0]=='@')continue;
		if(temp=="") break;
		group_productions.push_back(temp);	
	}
	configfile.close();
}
#include<string>
#include<fstream>
#include<cstdlib>
#include"data_entry.h"

using namespace std;

ofstream fobj;
const char *filename = "./output.cpp";

void createFile()
{
	string program_begin_section = 	
					
"#include<iostream>\n\
#include<string>\n\
 using namespace std;\n\
\
string str[1000];\n\
int i=0;\n\
"				
;
	fobj.open(filename,ios::out);
	fobj<<program_begin_section;

	list<string> :: iterator var;
	var = group_variables.begin();

	while(var!=group_variables.end())
	{
		fobj<<"\nbool "<<*var<<"();";
		var++;
	}
}

void closeFile()
{
	string program_end_section="\n\n\
int main(int argc, char* argv[])\n\
{\n\
	for(int j=0;j<argc-1;j++)\n\
	str[j] = argv[j+1];\n\
	if(S() && i==argc-1)\n\
	cout<<\"VALID\\n\";\n\
	else\n\
	cout<<\"INVALID\"<<\" FAULT AT POSITION: \"<<i+1<<\"\\n\";\n\
}\n\
";
	fobj<<program_end_section;
	fobj.close();
}

void makeExe()
{
	system("g++ -o validator output.cpp");
}

void makeClean()
{
	system("rm output.cpp");
}
//THis will create a prompt 
#include<iostream>
#include<string>
#include"data_entry.h"

#define TER_COMMAND "ter"
#define VAR_COMMAND "var"
#define PRO_COMMAND "pro"
#define TERCODE 1
#define VARCODE 2
#define PROCODE 3
#define YPROMPT "yamrec>"

int getCode(string command)
{
	if(command == TER_COMMAND)
		return TERCODE; 
	else if(command == VAR_COMMAND)
	       return VARCODE;	
	else if(command == PRO_COMMAND)
		return PROCODE;
}
void prompt()
{
	string uinput;
	
	cout<<YPROMPT;
	cin>>uinput;

		switch(getCode(uinput))
		{
			case TERCODE:
				enterTerminals();
				break;
			case VARCODE:
				enterVariables();
				break;
			case PROCODE:
				enterProductions();
				break;
			default:
			break;
		}
}

void menu(int en_prompt=0)
{
	if(en_prompt)
		prompt();
	else
	{
	enterTerminals();
	enterVariables();
	enterProductions();
	}
}


/*
AMREC	--- A Recursive descent parser generator

--By 
*/
#include<iostream>
#include<string>
#include<cstring>
#include<fstream>
#include"program_handler.h"
#include"prompt.h"
#include"data_entry.h"

#define TERMINAL_INDICATOR 0
#define VARIABLE_INDICATOR 1
#define SEPARATOR " "  // Used to separate symbols in production

using namespace std;

int variable_count;
int terminal_count;
int production_count;

void init()
{
	terminal_count = variable_count = 0;
}

void makeFunction(string lhs, list<string> rhs)
{
	fobj<<"\nbool "<<lhs<<"() { \n int pos=i; \n return(";
	list<string>::iterator itr = rhs.begin();
	bool ampsand_print = true;


	itr=rhs.begin();

		if(classify[*itr]==TERMINAL_INDICATOR)
			fobj<<"( str[i++]=="<<"\""<<*itr<<"\"";
		
		else if(classify[*itr]==VARIABLE_INDICATOR)
			fobj<<"( "<< *itr<<"()";
		
		else if(*itr=="|")
			{fobj<<") ||  \n\t\t"<<"(i=pos, "; ampsand_print = false;}
	itr++;

	for(;itr!=rhs.end();itr++)
	{
		if(*itr=="|")
		{
		fobj<<") ||  \n\t\t ("<<"i=pos, ";
		ampsand_print = false;
		continue;
		}
		else if(ampsand_print)
		fobj<<" && ";

		if(classify[*itr]==TERMINAL_INDICATOR)
			fobj<<"str[i++]=="<<"\""<<*itr<<"\"";
		
		else if(classify[*itr]==VARIABLE_INDICATOR)
			fobj<<*itr<<"()";

		ampsand_print = true;
	}

	fobj<<") );";
	fobj<<"\n}";
}

	//REQUIREMENT:  no prefixed <space> at starting of production
void makeProdFunction(string pstring)
{
	pstring=pstring+SEPARATOR;
	list<string> symbol_list;

	int lastpos=0;
       	int store_last = 0;
	int length=pstring.length();
	string symbol;

	lastpos = pstring.find(SEPARATOR,lastpos);
	string fun_name = pstring.substr(0,lastpos);
	store_last = lastpos+1;

	lastpos = pstring.find(SEPARATOR,lastpos+1);
	symbol = pstring.substr(store_last,lastpos-store_last);
	store_last = lastpos+1;

	while(store_last<length)
	{
	lastpos = pstring.find(SEPARATOR,lastpos+1);
	symbol = pstring.substr(store_last,lastpos-store_last);
	store_last = lastpos+1;
	if(symbol!="")
		//TODO: Check if the symbol is a valid variable or terminal mentioned before
		symbol_list.push_back(symbol);
	}
	
	makeFunction(fun_name,symbol_list);
}

void parseProductions()
{
	list <string> :: iterator pd;
	pd=group_productions.begin();
	while(pd!=group_productions.end())
	{
		makeProdFunction(*pd);
		pd++;
	}
}


int main(int argc, char *argv[])
// ADD functionality for multi letter string entry
{
	init();

	if(argc == 1)
		menu(0);
	else
	{
		if(!strcmp(argv[1],"-config"))
		{
			generateConfigFile();		
			return 0;
		}
		else
		readFile(argv[1]);
	}

	createFile();
	parseProductions();
	closeFile();
	makeExe();
	return 0;
}
